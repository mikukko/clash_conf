# 机场订阅，名称不能重复
proxy-providers:
  Sub:
    type: http
    # 单位秒
    interval: 18000
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 1800
    proxy: DIRECT
    # 机场订阅URL
    url: ""
    override:
      udp: true
      
# 用于下载订阅时指定UA
global-ua: clash.meta
    
# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
ipv6: false
allow-lan: true
unified-delay: true
tcp-concurrent: true
  
geodata-mode: false
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 48
geox-url:
  geoip: "https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip.dat"
  geosite: "https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geosite.dat"
  mmdb: "https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/country.mmdb"
  asn: "https://github.com/xishang0128/geoip/releases/download/latest/GeoLite2-ASN.mmdb"
  
# 控制面板
external-controller: 127.0.0.1:9521
secret: ""
external-ui: ui
external-ui-url: "https://ghp.ci/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

# 匹配进程 always/strict/off
find-process-mode: strict
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 30

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: true
  
# 流量嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com
  skip-domain:
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"
    
# 代理模式
tun:
  enable: true
  stack: mixed
  mtu: 9000
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true
  
# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  # 模式切换 redir-host / fake-ip
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  # 模式切换 whitelist/blacklist 
  # 黑名单模式表示如果匹配成功则不返回 Fake-IP, 白名单模式时只有匹配成功才返回 Fake-IP
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "+.lan"
    - "+.local"
    - geosite:private
    - geosite:cn
  default-nameserver:
    - 223.6.6.6
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:
    - "tls://dns.google"
    - "https://dns.cloudflare.com/dns-query"
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver-policy:
    "rule-set:private_domain,cn_domain":
    - 223.6.6.6
    - 223.5.5.5
    - 119.29.29.29

 
# 锚点
pr: &pr {type: select, proxies: [节点选择, 香港自动, 日本自动, 台湾自动, 新加坡自动, 美国自动, 手动选择, 自动选择, DIRECT]}
# 策略组
proxy-groups:
  - {name: 节点选择, type: select, proxies: [香港自动, 日本自动, 台湾自动, 新加坡自动, 美国自动, 手动选择, 自动选择, DIRECT]}
  - {name: 手动选择, type: select, include-all: true}
  
  - {name: AI, type: select, proxies: [日本自动, 新加坡自动, 美国自动, 手动选择, DIRECT]}
  - {name: Google, !!merge <<: *pr}
  - {name: YouTube, !!merge <<: *pr}
  - {name: GitHub, !!merge <<: *pr}
  - {name: Games, type: select, !!merge <<: *pr}
  - {name: Stream, type: select, !!merge <<: *pr}
  
  - {name: Apple, type: select, proxies: [DIRECT, 节点选择]}
  - {name: Bing, type: select, proxies: [DIRECT, 节点选择]}
  - {name: OneDrive, !!merge <<: *pr}
  - {name: Bahamut, type: select, proxies: [台湾自动, 手动选择]}
  - {name: Spotify, !!merge <<: *pr}
  - {name: Telegram, !!merge <<: *pr}
  - {name: Missed, !!merge <<: *pr}

  # - {name: 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  # - {name: 台湾节点, type: select, include-all: true, filter: "(?i)台|TW|Taiwan|tai wan"}
  # - {name: 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan"}
  # - {name: 新加坡节点, type: select, include-all: true, filter: "(?i)新|狮|獅|SG|Singapore"}
  # - {name: 美国节点, type: select, include-all: true, filter: "(?i)美|us|unitedstates|united states"}

  # - {name: 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  # - {name: 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"}
  # - {name: 台湾自动, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "(?=.*(台|TW|(?i)Taiwan))^((?!(港|日|韩|新|美)).)*$"}
  # - {name: 新加坡自动, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "(?=.*(新|狮|狮|SG|Singapore))^((?!(港|日|韩|台|美)).)*$"}
  # - {name: 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  # - {name: 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "^((?!(直连)).)*$"}
  
  # type: load-balance, strategy: round-robin
  - {name: 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$", url: "https://www.gstatic.com/generate_204", lazy: true, timeout: 5000, max-failed-times: 5}
  - {name: 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$", url: "https://www.gstatic.com/generate_204", lazy: true, timeout: 5000, max-failed-times: 5}
  - {name: 台湾自动, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "(?=.*(台|TW|(?i)Taiwan))^((?!(港|日|韩|新|美)).)*$", url: "https://www.gstatic.com/generate_204", lazy: true, timeout: 5000, max-failed-times: 5}
  - {name: 新加坡自动, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "(?=.*(新|狮|狮|SG|Singapore))^((?!(港|日|韩|台|美)).)*$", url: "https://www.gstatic.com/generate_204", lazy: true, timeout: 5000, max-failed-times: 5}
  - {name: 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$", url: "https://www.gstatic.com/generate_204", lazy: true, timeout: 5000, max-failed-times: 5}
  - {name: 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 900, filter: "^((?!(直连)).)*$", url: "https://www.gstatic.com/generate_204", lazy: false, timeout: 5000,max-failed-times: 5}
  - {name: 全部节点, type: select, include-all: true}


rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers: 
  # reject
  awavenue_domain: { <<: *domain, url: https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Clash.mrs}
  
  # AI
  ai: {!!merge <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/ai.mrs"}
  openai: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/openai.mrs"}
  gemini: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google-gemini.mrs"}
  claude: {!!merge <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Claude/Claude.list"}

  # 服务
  google_ip: {!!merge <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  google_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  youtube_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  
  apple_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  bing_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bing.mrs"}
  onedrive_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  github_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  bahamut_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bahamut.mrs"}
  spotify_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/spotify.mrs"}
  telegram_ip: {!!merge <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  telegram_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  cloudflare_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cloudflare.mrs"}
  tiktok_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  
  # 游戏
  steam_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs"}
  steamcn_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam@cn.mrs"}
  epic_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/epicgames.mrs"}
  games_cn: {!!merge <<: *domain, url: "https://github.com/DustinWin/ruleset_geodata/releases/download/mihomo-ruleset/games-cn.mrs"}
  games: {!!merge <<: *domain, url: "https://github.com/DustinWin/ruleset_geodata/releases/download/mihomo-ruleset/games.mrs"}

  # Stream
  netflix_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  disney_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/disney.mrs"}
  hbo_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/hbo.mrs"}
  hulu_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/hulu.mrs"}

  # GEO Rules
  private_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  cn_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: {!!merge <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  direct_list: {!!merge <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Direct/Direct.list"}
  proxylite: {!!merge <<: *class, url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/proxy.txt"}
  gfw_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  
rules:
  # Reject
  - RULE-SET, awavenue_domain, REJECT

  # AI
  - RULE-SET, ai, AI
  - RULE-SET, openai, AI
  - RULE-SET, gemini, AI
  - RULE-SET, claude, 美国自动

  # 服务
  - RULE-SET, google_ip, Google
  - RULE-SET, google_domain, Google
  - RULE-SET, youtube_domain, YouTube
  - RULE-SET, apple_domain, Apple
  - RULE-SET, bing_domain, Bing
  - RULE-SET, onedrive_domain, OneDrive
  - RULE-SET, github_domain, GitHub
  - RULE-SET, bahamut_domain, Bahamut
  - RULE-SET, spotify_domain, Spotify
  - RULE-SET, telegram_ip, Telegram
  - RULE-SET, telegram_domain, Telegram
  - RULE-SET, cloudflare_domain, 节点选择
  - RULE-SET, tiktok_domain, 节点选择

  # 游戏
  - RULE-SET, steam_domain, Games
  - RULE-SET, steamcn_domain, DIRECT
  - RULE-SET, epic_domain, Games
  - RULE-SET, games_cn, DIRECT
  - RULE-SET, games, Games

  # Stream
  - RULE-SET, netflix_domain, Stream
  - RULE-SET, disney_domain, Stream
  - RULE-SET, hbo_domain, Stream
  - RULE-SET, hulu_domain, Stream

  # GEO Rules
  - RULE-SET, private_domain, DIRECT
  - RULE-SET, direct_list, DIRECT
  - RULE-SET, cn_domain, DIRECT
  - RULE-SET, cn_ip, DIRECT
  - RULE-SET, proxylite, 节点选择
  - RULE-SET, gfw_domain, 节点选择
  - RULE-SET, geolocation-!cn, 节点选择

  # 漏网之鱼
  - MATCH, Missed

